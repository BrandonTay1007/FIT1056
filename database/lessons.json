[
    {
        "id": 1,
        "title": "Introduction to Programming",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Working with Textual Data",
                "type": "video",
                "content": "database/videos/testing.mp4"
            },
            {
                "id": 2,
                "title": "Integers and Floats(1)",
                "type": "text",
                "content": "Integers are whole numbers that have no decimal point. They can be positive, negative, or zero. Integers are great for counting things, like the number of items in a list or a person's age. While Floats are numbers that have a decimal point. They can represent fractional or decimal values, such as measurements or monetary amounts. Floats are useful when you need precision in calculations, like calculating distances or working with currency."
            },
            {
                "id": 3,
                "title": "Integers and Floats(2)",
                "type": "video",
                "content": "none"
            },
            {
                "id": 4,
                "title": "Lists, Tuples and Sets(1)",
                "type": "text",
                "content": "Lists are like a collection of items in a specific order. You can change the items, add new ones, or remove some. Think of a list like a shopping list where you can keep adding or removing things. For example:\n\n```python\nmy_list = [1, 2, 3, 4, 5]\n```. While for Tuples are similar to lists, but you can't change them once they're created. They are useful for storing things that shouldn’t change, like the days of the week. Like this:\n\n```python\nmy_tuple = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')\n```. Sets are collections of items where each item must be unique. You can add or remove items, but you can't change them once they're created. Sets are useful for storing a collection of items where order doesn’t matter and you want to ensure all items are unique. For example:\n\n```python\nmy_set = {1, 2, 3, 4, 5}\n```. Please proceed to the next lesson to know more about the data type."
            },
            {
                "id": 5,
                "title": "Lists, Tuples and Sets(2)",
                "type": "video",
                "content": "none"
            },
            {
                "id": 6,
                "title": "Conditionals and Booleans(1)",
                "type": "text",
                "content": "Conditionals allow a program to make decisions based on whether a Boolean expression is True or False. The most common conditional statement in Python is the if statement, which executes a block of code only if a specified condition is true. Additional conditions can be checked using elif (else if), and a default action can be defined using else. For booleans, booleans are a data type that represents two possible values: True or False. They are often used to check conditions and control the flow of a program. In Python, expressions that compare values (like 5 > 3) will return a Boolean result (True or False)."
            },
            {
                "id": 7,
                "title": "Conditionals and Booleans(2)",
                "type": "video",
                "content": "none"
            }   
        ]
    },
    {
        "id": 2,
        "title": "Functions",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Functions",
                "type": "text",
                "content": "function is a reusable block of code that performs a specific task. Functions allow you to organize your code into smaller, manageable parts, making it easier to read, maintain, and reuse. You can define your own functions to perform tasks or use built-in Python functions for common operations."
            },
            {
                "id": 2,
                "title": "Functions Tutorial Video",
                "type": "video",
                "content": "none"
            },
            {
                "id": 3,
                "title": "Import Modules and Exploring The Standard Library",
                "type": "text",
                "content": "In Python, a module is a file that contains a collection of related functions, variables, and classes. Modules allow you to organize your code into separate files, making it easier to manage and reuse. Python comes with a large number of built-in modules (standard library), and you can also create your own modules or install third-party ones.You use the import keyword to bring a module into your program. Once a module is imported, you can access its functions, classes, and variables. For example:\n\n```python\nimport math\nprint(math.sqrt(16))\n```."
            },
            {
                "id": 4,
                "title": "Import Modules and Exploring The Standard Library Tutorial Video",
                "type": "video",
                "content": "none"
            },
            {
                "id": 5,
                "title": "Defining Functions",
                "type": "text",
                "content": "You can define your own functions using the def keyword. Functions can take parameters, which are values you pass to the function to use inside it. You can also specify a default value for a parameter, which allows you to call the function without providing that argument. For example:\n\n```python\ndef greet(name='World'):\n    print(f'Hello, {name}!')```"
            }
        ]
    },
    {
        "id": 3,
        "title": "Functions",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Functions",
                "type": "text",
                "content": "function is a reusable block of code that performs a specific task. Functions allow you to organize your code into smaller, manageable parts, making it easier to read, maintain, and reuse. You can define your own functions to perform tasks or use built-in Python functions for common operations."
            },
            {
                "id": 2,
                "title": "Functions Tutorial Video",
                "type": "video",
                "content": "none"
            },
            {
                "id": 3,
                "title": "Import Modules and Exploring The Standard Library",
                "type": "text",
                "content": "In Python, a module is a file that contains a collection of related functions, variables, and classes. Modules allow you to organize your code into separate files, making it easier to manage and reuse. Python comes with a large number of built-in modules (standard library), and you can also create your own modules or install third-party ones.You use the import keyword to bring a module into your program. Once a module is imported, you can access its functions, classes, and variables. For example:\n\n```python\nimport math\nprint(math.sqrt(16))\n```."
            },
            {
                "id": 4,
                "title": "Import Modules and Exploring The Standard Library Tutorial Video",
                "type": "video",
                "content": "none"
            },
            {
                "id": 5,
                "title": "Defining Functions",
                "type": "text",
                "content": "You can define your own functions using the def keyword. Functions can take parameters, which are values you pass to the function to use inside it. You can also specify a default value for a parameter, which allows you to call the function without providing that argument. For example:\n\n```python\ndef greet(name='World'):\n    print(f'Hello, {name}!')```"
            }
        ]
    },
    {
        "id": 4,
        "title": "Loops and Iterations",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Loops in Python",
                "type": "text",
                "content": "Loops allow a program to repeat a block of code multiple times. Python has two types of loops: for loops and while loops. A for loop iterates over a sequence, such as a list or string, while a while loop continues executing as long as a specified condition is true. Loops are useful for automating repetitive tasks. Example of a for loop:\n\n```python\nfor i in range(5):\n    print(i)\n```"
            },
            {
                "id": 2,
                "title": "For Loop Tutorial Video",
                "type": "video",
                "content": "none"
            },
            {
                "id": 3,
                "title": "While Loops",
                "type": "text",
                "content": "A while loop repeats a block of code as long as a given condition remains true. Be careful when using while loops to avoidinfinite loops. Here's an example:\n\n```python\nx = 0\nwhile x < 5:\n    print(x)\n    x += 1\n```"
            },
            {
                "id": 4,
                "title": "While Loop Tutorial Video",
                "type": "video",
                "content": "none"
            }
        ]
    },
    {
        "id": 5,
        "title": "File Handling",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Reading and Writing Files",
                "type": "text",
                "content": "Python allows you to read from and write to files using built-in functions. To open a file, you can use the `open()` function. Files can be opened in various modes, such as 'r' for reading, 'w' for writing, and 'a' for appending. Example:\n\n```python\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)\n```"
            },
            {
                "id": 2,
                "title": "File Handling Tutorial Video",
                "type": "video",
                "content": "none"
            }
        ]
    },
    {
        "id": 6,
        "title": "Error Handling",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Introduction to Exceptions",
                "type": "text",
                "content": "Errors can occur in your code, and Python provides ways to handle them using try-except blocks. This ensures your program can continue running even if an error occurs. Here's an example:\n\n```python\ntry:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')\n```"
            },
            {
                "id": 2,
                "title": "Exception Handling Video",
                "type": "video",
                "content": "none"
            }
        ]
    },
    {
        "id": 7,
        "title": "Object-Oriented Programming",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Classes and Objects",
                "type": "text",
                "content": "Python supports Object-Oriented Programming (OOP), where you can define classes that contain methods and attributes. A class is like a blueprint, and objects are instances of that class. Example of a class:\n\n```python\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n    def bark(self):\n        print(f'{self.name} is barking')\n```"
            },
            {
                "id": 2,
                "title": "OOP Basics Tutorial Video",
                "type": "video",
                "content": "none"
            }
        ]
    },
    {
        "id": 8,
        "title": "Data Structures",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Understanding Dictionaries",
                "type": "text",
                "content": "A dictionary is a collection of key-value pairs. Each key must be unique, and the values can be any data type. Dictionaries are unordered and mutable. Example:\n\n```python\nmy_dict = {'name': 'John', 'age': 25}\nprint(my_dict['name'])\n```"
            },
            {
                "id": 2,
                "title": "Dictionaries Tutorial Video",
                "type": "video",
                "content": "none"
            }
        ]
    },
    {
        "id": 9,
        "title": "Advanced Functions",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Lambda Functions",
                "type": "text",
                "content": "Lambda functions are small anonymous functions that can have any number of arguments but only one expression. They're often used as a quick way to define functions without a full `def` block. Example:\n\n```python\nsquare = lambda x: x * x\nprint(square(5))\n```"
            },
            {
                "id": 2,
                "title": "Lambda Functions Tutorial Video",
                "type": "video",
                "content": "none"
            }
        ]
    },
    {
        "id": 10,
        "title": "Working with APIs",
        "type": "lectures",
        "content_list": [
            {
                "id": 1,
                "title": "Introduction to APIs",
                "type": "text",
                "content": "An API (Application Programming Interface) allows two applications to communicate with each other. In Python, you can use modules like requests to interact with APIs. Here's an example of making a GET request:\n\n```python\nimport requests\nresponse = requests.get('https://api.example.com/data')\nprint(response.json())\n```"
            },
            {
                "id": 2,
                "title": "API Tutorial Video",
                "type": "video",
                "content": "none"
            }
        ]
    }
]
